
module car(CLK, RESET, CONTROL, ROW, COLR, COLG, CAT, DISPLAY);
   input            CLK;
   input            RESET;
   input [2:0]      CONTROL;
   output [7:0]     ROW;
   reg [7:0]        ROW;
   output [7:0]     COLR;
   reg [7:0]        COLR;
   output [7:0]     COLG;
   reg [7:0]        COLG;
   output [5:0]     CAT;
   reg [5:0]        CAT;
   output [6:0]     DISPLAY;
   reg [6:0]        DISPLAY;
   
   reg [15:0]       TEMP1;
   reg [25:0]       TEMP2;
   reg              CLK1K;
   reg              CLK1HZ;
   reg [2:0]        TIMEH;
   reg [3:0]        TIMEL;
   reg [6:0]        LIGHTH;
   reg [6:0]        LIGHTL;
   parameter [1:0]  PRESENT_STATE_H = 0,
                    PRESENT_STATE_L = 1;
   reg [1:0]        P_STATE;
   reg [1:0]        STATE;
   reg [2:0]        COUNT;
   reg [2:0]        CX;
   reg [2:0]        CY;
   reg [7:0]        ROWS;
   reg [7:0]        COLR7;
   reg [7:0]        COLR6;
   reg [7:0]        COLR5;
   reg [7:0]        COLR4;
   reg [7:0]        COLR3;
   reg [7:0]        COLR2;
   reg [7:0]        COLR1;
   reg [7:0]        COLR0;
   reg [7:0]        COLG7;
   reg [7:0]        COLG6;
   reg [7:0]        COLG5;
   reg [7:0]        COLG4;
   reg [7:0]        COLG3;
   reg [7:0]        COLG2;
   reg [7:0]        COLG1;
   reg [7:0]        COLG0;
   
   
   always @(posedge CLK)
   begin: DIV1K
      
      begin
         if (TEMP1 == 49999)
            TEMP1 <= 0;
         else
            TEMP1 <= TEMP1 + 1;
         
         if (TEMP1 < 25000)
            CLK1K <= 1'b0;
         else
            CLK1K <= 1'b1;
      end
   end
   
   
   always @(posedge CLK)
   begin: DIV1HZ
      
      begin
         if (TEMP2 == 49999999)
            TEMP2 <= 0;
         else
            TEMP2 <= TEMP2 + 1;
         
         if (TEMP2 < 25000000)
            CLK1HZ <= 1'b0;
         else
            CLK1HZ <= 1'b1;
      end
   end
   
   
   always @(posedge CLK1HZ or posedge RESET)
   begin: GAMERUN
      
      if (RESET == 1'b1)
      begin
         STATE <= 0;
         COUNT <= 6;
         CX <= 2;
         CY <= 0;
         TIMEH <= 0;
         TIMEL <= 0;
         COLG7 <= 8'b00000000;
         COLG6 <= 8'b00000000;
         COLG5 <= 8'b00000000;
         COLG4 <= 8'b00000000;
         COLG3 <= 8'b00000000;
         COLG2 <= 8'b00000000;
         COLG1 <= 8'b00000000;
         COLG0 <= 8'b00000000;
      end
      else 
         
         case (STATE)
            0 :
               case (COUNT)
                  6 :
                     begin
                        COUNT <= 5;
                        COLR7 <= 8'b00000000;
                        COLR6 <= 8'b00000000;
                        COLR5 <= 8'b00000000;
                        COLR4 <= 8'b00000000;
                        COLR3 <= 8'b00000000;
                        COLR2 <= 8'b00000000;
                        COLR1 <= 8'b00000000;
                        COLR0 <= 8'b00000000;
                     end
                  5 :
                     begin
                        COUNT <= 4;
                        COLR7 <= 8'b00111100;
                        COLR6 <= 8'b00100000;
                        COLR5 <= 8'b00100000;
                        COLR4 <= 8'b00111100;
                        COLR3 <= 8'b00000100;
                        COLR2 <= 8'b00000100;
                        COLR1 <= 8'b00000100;
                        COLR0 <= 8'b00111100;
                     end
                  4 :
                     begin
                        COUNT <= 3;
                        COLR7 <= 8'b00100100;
                        COLR6 <= 8'b00100100;
                        COLR5 <= 8'b00100100;
                        COLR4 <= 8'b00111100;
                        COLR3 <= 8'b00000100;
                        COLR2 <= 8'b00000100;
                        COLR1 <= 8'b00000100;
                        COLR0 <= 8'b00000100;
                     end
                  3 :
                     begin
                        COUNT <= 2;
                        COLR7 <= 8'b00111100;
                        COLR6 <= 8'b00000100;
                        COLR5 <= 8'b00000100;
                        COLR4 <= 8'b00111100;
                        COLR3 <= 8'b00000100;
                        COLR2 <= 8'b00000100;
                        COLR1 <= 8'b00000100;
                        COLR0 <= 8'b00111100;
                     end
                  2 :
                     begin
                        COUNT <= 1;
                        COLR7 <= 8'b00111100;
                        COLR6 <= 8'b00000100;
                        COLR5 <= 8'b00000100;
                        COLR4 <= 8'b00111100;
                        COLR3 <= 8'b00100000;
                        COLR2 <= 8'b00100000;
                        COLR1 <= 8'b00100000;
                        COLR0 <= 8'b00111100;
                     end
                  1 :
                     begin
                        COUNT <= 0;
                        COLR7 <= 8'b00001000;
                        COLR6 <= 8'b00001000;
                        COLR5 <= 8'b00001000;
                        COLR4 <= 8'b00001000;
                        COLR3 <= 8'b00001000;
                        COLR2 <= 8'b00001000;
                        COLR1 <= 8'b00001000;
                        COLR0 <= 8'b00001000;
                     end
                  0 :
                     begin
                        COUNT <= 6;
                        STATE <= 1;
                     end
               endcase
            
            1 :
               begin
                  if (TIMEL == 9)
                  begin
                     TIMEL <= 0;
                     if (TIMEH == 5)
                     begin
                        TIMEH <= 0;
                        if (CY != 7)
                           STATE <= 3;
                        else
                           STATE <= 2;
                     end
                     else
                        TIMEH <= TIMEH + 1;
                  end
                  else
                     TIMEL <= TIMEL + 1;
                  
                  COLG7 <= 8'b00001110;
                  COLG6 <= 8'b00000000;
                  COLG5 <= 8'b00000000;
                  COLG4 <= 8'b00000000;
                  COLG3 <= 8'b00000000;
                  COLG2 <= 8'b00000000;
                  COLG1 <= 8'b00000000;
                  COLG0 <= 8'b00000000;
                  
                  COLR7 <= 8'b00011111;
                  COLR6 <= 8'b00010001;
                  COLR5 <= 8'b00010001;
                  COLR4 <= 8'b00100010;
                  COLR3 <= 8'b01000100;
                  COLR2 <= 8'b10001000;
                  COLR1 <= 8'b10001000;
                  COLR0 <= 8'b10001000;
                  
                  case (CY)
                     0 :
                        COLG0[7 - CX] <= 1'b1;
                     1 :
                        COLG1[7 - CX] <= 1'b1;
                     2 :
                        COLG2[7 - CX] <= 1'b1;
                     3 :
                        COLG3[7 - CX] <= 1'b1;
                     4 :
                        COLG4[7 - CX] <= 1'b1;
                     5 :
                        COLG5[7 - CX] <= 1'b1;
                     6 :
                        COLG6[7 - CX] <= 1'b1;
                     7 :
                        COLG7[7 - CX] <= 1'b1;
                  endcase
                  
                  case (CONTROL)
                     3'b100 :
                        CX <= CX - 1;
                     3'b010 :
                        CY <= CY + 1;
                     3'b001 :
                        CX <= CX + 1;
                     default :
                        ;
                  endcase
                  case (CY)
                     0 :
                        if (COLR0[7 - CX] == 1'b1)
                           STATE <= 3;
                        else
                           COLG0[7 - CX] <= 1'b1;
                     1 :
                        if (COLR1[7 - CX] == 1'b1)
                           STATE <= 3;
                        else
                           COLG1[7 - CX] <= 1'b1;
                     2 :
                        if (COLR2[7 - CX] == 1'b1)
                           STATE <= 3;
                        else
                           COLG2[7 - CX] <= 1'b1;
                     3 :
                        if (COLR3[7 - CX] == 1'b1)
                           STATE <= 3;
                        else
                           COLG3[7 - CX] <= 1'b1;
                     4 :
                        if (COLR4[7 - CX] == 1'b1)
                           STATE <= 3;
                        else
                           COLG4[7 - CX] <= 1'b1;
                     5 :
                        if (COLR5[7 - CX] == 1'b1)
                           STATE <= 3;
                        else
                           COLG5[7 - CX] <= 1'b1;
                     6 :
                        if (COLR6[7 - CX] == 1'b1)
                           STATE <= 3;
                        else
                           COLG6[7 - CX] <= 1'b1;
                     7 :
                        STATE <= 2;
                  endcase
                  
                  if (CY == 7)
                     STATE <= 2;
               end
            2 :
               begin
                  COLR7 <= 8'b00000000;
                  COLR6 <= 8'b00000000;
                  COLR5 <= 8'b00000000;
                  COLR4 <= 8'b00000000;
                  COLR3 <= 8'b00000000;
                  COLR2 <= 8'b00000000;
                  COLR1 <= 8'b00000000;
                  COLR0 <= 8'b00000000;
                  COLG7 <= 8'b00000000;
                  COLG6 <= 8'b00000001;
                  COLG5 <= 8'b10000010;
                  COLG4 <= 8'b01000100;
                  COLG3 <= 8'b00101000;
                  COLG2 <= 8'b00010000;
                  COLG1 <= 8'b00000000;
                  COLG0 <= 8'b00000000;
               end
            3 :
               begin
                  COLG7 <= 8'b00000000;
                  COLG6 <= 8'b00000000;
                  COLG5 <= 8'b00000000;
                  COLG4 <= 8'b00000000;
                  COLG3 <= 8'b00000000;
                  COLG2 <= 8'b00000000;
                  COLG1 <= 8'b00000000;
                  COLG0 <= 8'b00000000;
                  COLR7 <= 8'b00000000;
                  COLR6 <= 8'b01000010;
                  COLR5 <= 8'b00100100;
                  COLR4 <= 8'b00011000;
                  COLR3 <= 8'b00011000;
                  COLR2 <= 8'b00100100;
                  COLR1 <= 8'b01000010;
                  COLR0 <= 8'b00000000;
               end
         endcase
   end
   
   
   always @(posedge CLK1K)
   begin: LSTSHOW
      
         case (ROWS)
            8'b11111110 :
               begin
                  COLR <= COLR0;
                  COLG <= COLG0;
                  ROW <= ROWS;
                  ROWS <= 8'b11111101;
               end
            8'b11111101 :
               begin
                  COLR <= COLR1;
                  COLG <= COLG1;
                  ROW <= ROWS;
                  ROWS <= 8'b11111011;
               end
            8'b11111011 :
               begin
                  COLR <= COLR2;
                  COLG <= COLG2;
                  ROW <= ROWS;
                  ROWS <= 8'b11110111;
               end
            8'b11110111 :
               begin
                  COLR <= COLR3;
                  COLG <= COLG3;
                  ROW <= ROWS;
                  ROWS <= 8'b11101111;
               end
            8'b11101111 :
               begin
                  COLR <= COLR4;
                  COLG <= COLG4;
                  ROW <= ROWS;
                  ROWS <= 8'b11011111;
               end
            8'b11011111 :
               begin
                  COLR <= COLR5;
                  COLG <= COLG5;
                  ROW <= ROWS;
                  ROWS <= 8'b10111111;
               end
            8'b10111111 :
               begin
                  COLR <= COLR6;
                  COLG <= COLG6;
                  ROW <= ROWS;
                  ROWS <= 8'b01111111;
               end
            8'b01111111 :
               begin
                  COLR <= COLR7;
                  COLG <= COLG7;
                  ROW <= ROWS;
                  ROWS <= 8'b11111110;
               end
            default :
               ROWS <= 8'b11111110;
         endcase
   end
   
   
   always @(posedge CLK1K or posedge TIMEH or posedge TIMEL)
   begin: SHOWT
      case (TIMEH)
         5 :
            LIGHTH <= 7'b1011011;
         4 :
            LIGHTH <= 7'b0110011;
         3 :
            LIGHTH <= 7'b1111001;
         2 :
            LIGHTH <= 7'b1101101;
         1 :
            LIGHTH <= 7'b0110000;
         0 :
            LIGHTH <= 7'b1111110;
         default :
            LIGHTH <= 7'b0000000;
      endcase
      case (TIMEL)
         9 :
            LIGHTL <= 7'b1111011;
         8 :
            LIGHTL <= 7'b1111111;
         7 :
            LIGHTL <= 7'b1110000;
         6 :
            LIGHTL <= 7'b1011111;
         5 :
            LIGHTL <= 7'b1011011;
         3 :
            LIGHTL <= 7'b1111001;
         2 :
            LIGHTL <= 7'b1101101;
         1 :
            LIGHTL <= 7'b0110000;
         0 :
            LIGHTL <= 7'b1111110;
         default :
            LIGHTL <= 7'b0000000;
      endcase
             
         case (P_STATE)
            PRESENT_STATE_L :
               begin
                  P_STATE <= PRESENT_STATE_H;
                  CAT <= 6'b111110;
                  DISPLAY <= LIGHTL;
               end
            PRESENT_STATE_H :
               begin
                  P_STATE <= PRESENT_STATE_L;
                  CAT <= 6'b111101;
                  DISPLAY <= LIGHTH;
               end
         endcase
   end
   
endmodule



***************************************************************************************



module part1dianzhen(clk,clkcnt,clkrow,hang,liered,liegreen,sw) ;
input clk,clkcnt,clkrow ;//系统时钟信号，计秒时钟，扫描行时钟
input sw ;
output reg[7:0] hang ;      
output reg[7:0] liered ;
output reg[7:0] liegreen ;
reg sw_open = 0 ;//开关状态
reg[1:0] cnt = 0 ;//记录秒
reg signed[2:0] cntrow = -1  ;//带符号位



always@(posedge clk)
if(!sw)
sw_open = 1 ;

always@(posedge clkcnt)
if(sw_open&&cnt!=5)
cnt = cnt+1 ;
//行扫描电路

always@(posedge clkrow)
begin
if(sw_open)
cntrow = (cntrow+1)%8 ;
case(cntrow)
0:hang=8'b11111110;
1:hang=8'b11111101;
2:hang=8'b11111011;
3:hang=8'b11110111;
4:hang=8'b11101111;
5:hang=8'b11011111;
6:hang=8'b10111111;
7:hang=8'b01111111;
endcase
end
//随时间变化电路
always@(posedge clkcnt)
if(cnt == 1)
case(hang)
11111110:liered = 8'b00111100;
11111101:liered = 8'b00100000;
11111011:liered = 8'b00100000;
11110111:liered = 8'b00111100;
11101111:liered = 8'b00000100;
11011111:liered = 8'b00000100;
10111111:liered = 8'b00000100;
01111111:liered = 8'b00111100;
endcase
else if(cnt == 2)
case(hang)
11111110:liered = 8'b00100100;
11111101:liered = 8'b00100100;
11111011:liered = 8'b00100100;
11110111:liered = 8'b00111100;
11101111:liered = 8'b00000100;
11011111:liered = 8'b00000100;
10111111:liered = 8'b00000100;
01111111:liered = 8'b00000100;
endcase


else if(cnt==3)
case(hang)
11111110:liered = 8'b00111100;
11111101:liered = 8'b00000100;
11111011:liered = 8'b00000100;
11110111:liered = 8'b00111100;
11101111:liered = 8'b00000100;
11011111:liered = 8'b00000100;
10111111:liered = 8'b00000100;
01111111:liered = 8'b00111100;
endcase

else if(cnt==4)
case(hang)
11111110:liered = 8'b00111100;
11111101:liered = 8'b00000100;
11111011:liered = 8'b00000100;
11110111:liered = 8'b00111100;
11101111:liered = 8'b00100000;
11011111:liered = 8'b00100000;
10111111:liered = 8'b00100000;
01111111:liered = 8'b00111100;
endcase

else if(cnt==5)
case(hang)
11111110:liered = 8'b00001000;
11111101:liered = 8'b00001000;
11111011:liered = 8'b00001000;
11110111:liered = 8'b00001000;
11101111:liered = 8'b00001000;
11011111:liered = 8'b00001000;
10111111:liered = 8'b00001000;
01111111:liered = 8'b00001000;
endcase
endmodule







